# -*- coding: utf-8 -*-

"""cryto_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uTmmisyICwtHeOEcp5YD1-fzz7jn3R4K
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import pandas_datareader as web
import datetime as dt

from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM

crypto = 'ETH-USD'
start = dt.datetime(2012,1,1)
end = dt.datetime(2020,1,1)

# data = web.DataReader(company, 'yahoo', start, end)
data = web.DataReader(crypto,'yahoo', start, end)
print(data)

scaler =MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(data_cryto['Adj Close'].values.reshape(-1,1))
prediction_days = 60
x_train = []
y_train = []

for x in range(prediction_days, len(scaled_data)):
  x_train.append(scaled_data[x-prediction_days:x, 0])
  y_train.append(scaled_data[x, 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))



"""Build the model"""


model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50))
model.add(Dropout(0.2))
model.add(Dense(units=1)) # Prediction of the next closing value

model.compile(optimizer='adam',loss='mean_squared_error')
model.fit(x_train, y_train, epochs=25, batch_size=32)



"""Load test data"""


test_start = dt.datetime(2020,1,1)
test_end = dt.datetime.now()

start = dt.datetime(2021,1,1)
end = dt.datetime(2021,3,11)

test_data = web.DataReader(crypto,'yahoo', start, end)
actual_prices = test_data['Adj Close'].values

total_dataset = pd.concat((data['Adj Close'], test_data['Adj Close']), axis=0)

model_inputs = total_dataset[len(total_dataset) - len(test_data) - prediction_days:].values
model_inputs = model_inputs.reshape(-1, 1)
model_inputs = scaler.transform(model_inputs)



"""Make predictions on test data"""


x_test = []

for x in range(prediction_days, len(model_inputs)+1):
  x_test.append(model_inputs[x-prediction_days:x, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

predicted_prices = model.predict(x_test)
predicted_prices = scaler.inverse_transform(predicted_prices)



"""Plot the test predictions"""


plt.plot(actual_prices, color="black", label=f"Actual {crypto} Price")
plt.plot(predicted_prices, color="green", label=f"Predicted {crypto} Price")
plt.title(f"{crypto}")
plt.xlabel('Time')
plt.ylabel(f"{crypto} Price")
plt.legend()
plt.show()



"""Predict Next Day"""


real_data = [model_inputs[len(model_inputs) + 1 - prediction_days:len(model_inputs+1), 0]]
real_data = np.array(real_data)
real_data = np.reshape(real_data, (real_data.shape[0], real_data.shape[1], 1))

prediction = model.predict(real_data)
prediction = scaler.inverse_transform(prediction)
print(f"Prediction:{prediction}")